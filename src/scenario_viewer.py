#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

import argparse
import sys
from pathlib import Path
from scenario_creator import ScenarioCreator
from config import get_config


def list_scenarios(action_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è"""
    cfg = get_config()
    action_dir = cfg.get_action_path(action_name)
    
    if not action_dir.exists():
        print(f"–ü–∞–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è '{action_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (–≤—Å–µ .json —Ñ–∞–π–ª—ã –∫—Ä–æ–º–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö)
    scenario_files = []
    for file in action_dir.glob("*.json"):
        if file.name not in ["log.json", "actions_base.json"]:
            scenario_files.append(file)
    
    if not scenario_files:
        print(f"–°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{action_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"–°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{action_name}':")
    print("-" * 50)
    
    try:
        creator = ScenarioCreator(action_name)
        
        for scenario_file in sorted(scenario_files):
            scenario_name = scenario_file.stem
            info = creator.get_scenario_info(scenario_name)
            
            if info and 'error' not in info:
                print(f"üìÅ {scenario_name}")
                print(f"   –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {info['total_actions']}")
                print(f"   –ö–ª–∏–∫–∏: {info['click_actions']}, –í–≤–æ–¥: {info['typing_actions']}, –û–∂–∏–¥–∞–Ω–∏—è: {info['wait_actions']}")
                if info['enter_actions'] > 0 or info['space_actions'] > 0:
                    print(f"   Enter: {info['enter_actions']}, Space: {info['space_actions']}")
                print()
            else:
                print(f"‚ùå {scenario_name} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è")
                print()
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")


def show_scenario_details(action_name, scenario_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    try:
        creator = ScenarioCreator(action_name)
        cfg = get_config()
        scenario_file = cfg.get_scenario_file_path(action_name, scenario_name)
        
        if not scenario_file.exists():
            print(f"–°—Ü–µ–Ω–∞—Ä–∏–π '{scenario_name}' –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{action_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        import json
        with open(scenario_file, 'r', encoding='utf-8') as f:
            scenario_data = json.load(f)
        
        info = creator.get_scenario_info(scenario_name)
        
        print(f"–î–µ—Ç–∞–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è '{scenario_name}' –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{action_name}'")
        print("=" * 60)
        print(f"–§–∞–π–ª: {scenario_file}")
        print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {scenario_file.stat().st_size} –±–∞–π—Ç")
        print()
        
        if info and 'error' not in info:
            print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {info['total_actions']}")
            print(f"  –ö–ª–∏–∫–∏ –º—ã—à—å—é: {info['click_actions']}")
            print(f"  –î–µ–π—Å—Ç–≤–∏—è –≤–≤–æ–¥–∞: {info['typing_actions']}")
            print(f"  –û–∂–∏–¥–∞–Ω–∏—è: {info['wait_actions']}")
            print(f"  –ù–∞–∂–∞—Ç–∏—è Enter: {info['enter_actions']}")
            print(f"  –ù–∞–∂–∞—Ç–∏—è Space: {info['space_actions']}")
            print()
        
        print("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π:")
        print("-" * 30)
        
        for i, action in enumerate(scenario_data[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–µ–π—Å—Ç–≤–∏–π
            action_name = action.get('name', 'unknown')
            action_id = action.get('id', '')
            
            if action_name == 'click left' or action_name == 'click right':
                x, y = action.get('x', '?'), action.get('y', '?')
                print(f"{i+1:2d}. {action_name} –≤ —Ç–æ—á–∫–µ ({x}, {y}) [ID: {action_id}]")
            elif action_name == 'typing':
                text = action.get('text', '')[:30]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
                print(f"{i+1:2d}. –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: '{text}' [ID: {action_id}]")
            elif action_name == 'wait':
                event = action.get('event', {})
                if event.get('name') == 'timer':
                    time_val = event.get('time', 0)
                    print(f"{i+1:2d}. –æ–∂–∏–¥–∞–Ω–∏–µ {time_val} —Å–µ–∫ [ID: {action_id}]")
                elif event.get('name') == 'picOnScreen':
                    pic_file = event.get('file', '')
                    print(f"{i+1:2d}. –æ–∂–∏–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ '{pic_file}' [ID: {action_id}]")
                else:
                    print(f"{i+1:2d}. –æ–∂–∏–¥–∞–Ω–∏–µ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø) [ID: {action_id}]")
            else:
                print(f"{i+1:2d}. {action_name} [ID: {action_id}]")
        
        if len(scenario_data) > 10:
            print(f"... –∏ –µ—â–µ {len(scenario_data) - 10} –¥–µ–π—Å—Ç–≤–∏–π")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")


def list_actions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    cfg = get_config()
    actions_folder = cfg.get_action_folder()
    
    if not actions_folder.exists():
        print(f"–ü–∞–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π '{actions_folder}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    action_dirs = [d for d in actions_folder.iterdir() if d.is_dir()]
    
    if not action_dirs:
        print("–î–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    print("-" * 30)
    
    for action_dir in sorted(action_dirs):
        action_name = action_dir.name
        has_log = (action_dir / "log.json").exists()
        has_base = (action_dir / "actions_base.json").exists()
        
        status_log = "‚úÖ" if has_log else "‚ùå"
        status_base = "‚úÖ" if has_base else "‚ùå"
        
        print(f"üìÅ {action_name}")
        print(f"   –õ–æ–≥: {status_log}  –ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {status_base}")
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        scenario_files = [f for f in action_dir.glob("*.json") 
                         if f.name not in ["log.json", "actions_base.json"]]
        if scenario_files:
            print(f"   –°—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenario_files)}")
        print()


def main():
    parser = argparse.ArgumentParser(
        description="–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ looper",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    parser_actions = subparsers.add_parser('actions', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    parser_scenarios = subparsers.add_parser('scenarios', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è')
    parser_scenarios.add_argument('action_name', help='–ò–º—è –¥–µ–π—Å—Ç–≤–∏—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Å—Ü–µ–Ω–∞—Ä–∏—è
    parser_details = subparsers.add_parser('details', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è')
    parser_details.add_argument('action_name', help='–ò–º—è –¥–µ–π—Å—Ç–≤–∏—è')
    parser_details.add_argument('scenario_name', help='–ò–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        if args.command == 'actions':
            list_actions()
        elif args.command == 'scenarios':
            list_scenarios(args.action_name)
        elif args.command == 'details':
            show_scenario_details(args.action_name, args.scenario_name)
    
    except KeyboardInterrupt:
        print("\n–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
